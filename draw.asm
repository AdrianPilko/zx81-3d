; Copyright (c) 2025 Adrian Pilkington

; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:

; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.

; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.


; preamble!!

; the zx81 has 32 columns by 24 rows of characters - not pixels
; the pixels can only be plotted using rom characters
; we have to manipulate/recalculate the x y coordinate into a pixel coordinate
; the characters are as follows showing only the ones we need here
; this means we can have horizontally 32 * 2 = 64 pixels 
; and vertically we can have 24 * 2 = 48 pixels

;; symbol   int   
;;===============
;; o-        1       
;; --                     
;;===============
;; -o        2     
;; --                   
;;===============
;; --        4        
;; o-                    
;;===============
;; --      135
;; -o                          

;; The easiest way to handle this is using some kind of lookup table that
;; encodes the mapping between odd even columns to 
;; 0 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2
;;                     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4


;; any x position thats even will use character 1 or 4, odd x positions will be 2 or 135
;; for example x position of 0, 2, or 4 will use 1 or 4 and 1, 3, 5 will use 2 or 135

;; and also the row needs accounting for starting with the 2 characters possible from row
;; lookup: 
;; any y position thats even will use character 1 or 2, odd x positions will be 4 or 135
;; for example y position of 0, 2, or 4 will use 1 or 2 and 1, 3, 5 will use 4 or 135

;; putting this together is we want to plot a pixel at x = 50 and y = 23
;; then x is odd so it's 2 or 135
;; and y is even so it's 1 or 2, and the only match now is character 2

;; but we're still plotting a character and at a location between 0 and 31 horizontally and
;; between 0 and 23 vertically
;; for speed we'll precalculate all of this so it's just a memory lookup - not any math
;; but uses more memory
;; we have a "matrix" which is 64 by 24 and the value at each location is the character to print

pixel_64_by_48_char_mapping
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135
    defb 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2
    defb 4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135,4,135

X_Plot_Position
    defb 0
Y_Plot_Position
    defb 0

drawPixel
    ; draw a "pixel" at positions stored in rows X_Plot_Position and columns Y_Plot_Position

	ld hl, pixel_64_by_48_char_mapping
    ;;c will be the y pos, b will be x
    
    ld a, (X_Plot_Position)
    ld b, a
    ld de, 0
	ld e, b
	add hl, de	
	ld a, (Y_Plot_Position)
    ld b, a	
	ld de, 64
pixelOffsetLoop		
	add hl, de
	djnz pixelOffsetLoop
    ; now take off the extra +1 of the loop using de = -64
    ld de, -64
    add hl, de
	; now hl contains the memory location in the pixel_64_by_48_char_mapping of the character so put this in a
	ld a, (hl)

    ; preserve these for now for the debug in test
    push af        
        ld a, (X_Plot_Position)
        sra a   ; divide a by 2 giving proper character position
        ld hl, Display
        inc hl
        ld de, 0
        ld e, a        
        add hl, de
        ld a, (Y_Plot_Position)
        sra a ; divide a by 2 giving proper y position
        ld b, a
        inc b ; (just in case it's zero - we correct address after by -33)
        ld de, 33
secondPixelLoop        
        add hl, de
        djnz secondPixelLoop
        ld de, -33
        add hl, de
    pop af 
    ld (hl), a
	ret


;;; test code

TEST_pixel_64_by_48_char_mapping
	call CLS

    ld a, 1
	ld (X_Plot_Position), a
    ld a, 1
	ld (Y_Plot_Position), a     
	call drawPixel    

    ld a, 2
	ld (X_Plot_Position), a
    ld a, 2
	ld (Y_Plot_Position), a     
	call drawPixel    

    ld a, 3
	ld (X_Plot_Position), a
    ld a, 3
	ld (Y_Plot_Position), a     
	call drawPixel    

    ld a, 4
	ld (X_Plot_Position), a
    ld a, 4
	ld (Y_Plot_Position), a     
	call drawPixel        



	ret


TEST_PIX_text_1
	defb _P,_I,_X,_E,_L,0,_P,_O,_S,_I,_T,_I,_O,_N,$ff
TEST_PIX_text_2
	defb _C,_H,_A,_R,0,_R,_E,_S,_U,_L,_T,$ff